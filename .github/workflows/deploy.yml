name: Deploy Streaming App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies and lint
      run: |
        npm ci
        npm run lint
    
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        timeout: 300s
        script: |
          set -e
          
          echo "🚀 Starting deployment..."
          
          # Create deployment directory
          mkdir -p ~/streaming
          
          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            echo "📦 Installing Docker..."
            sudo apt update
            sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt update
            sudo apt install -y docker-ce docker-ce-cli containerd.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
          fi
          
          # Install Docker Compose if not present
          if ! command -v docker-compose &> /dev/null; then
            echo "📦 Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
    
    - name: Sync project files
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        source: "."
        target: "~/streaming"
        rm: true
        exclude: "node_modules,.git,.github,test-media,dist"
      
    - name: Build and restart container
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        timeout: 300s
        script: |
          set -e
          
          cd ~/streaming
          
          echo "🛑 Stopping existing container..."
          docker-compose down || true
          
          echo "🐳 Building and starting container..."
          docker-compose build --no-cache
          docker-compose up -d
          
          echo "📊 Container status:"
          docker-compose ps
          
          echo "📜 Recent logs:"
          docker-compose logs --tail=20
          
          echo "🔍 Debugging container health:"
          docker ps -a
          docker-compose ps
          
          # Check if container is running and healthy
          if [ "$(docker ps -q -f name=streaming)" ]; then
            echo "✅ Container is running"
            docker logs streaming --tail=10
          else
            echo "❌ Container is not running"
            docker logs streaming --tail=20 || echo "No logs available"
          fi
          
          echo "✅ Deployment completed!"
          echo "🌐 Application available at: http://streaming.thimotefetu.fr"